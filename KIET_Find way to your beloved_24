import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Random;
import java.util.StringTokenizer;

public class ashu {
    public static void main(String args[]) {
        FastScanner fs=new FastScanner();
        int n=fs.nextInt();
        int m=fs.nextInt();
        long [][]arr=new long[n][m];
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++)
                arr[i][j]=fs.nextLong();
        }
        System.out.println(Solve(arr,0,0));
    }
    public static long Solve(long [][]arr,int row,int col)
    {
        if(row<0||row>=arr.length||col<0||col>=arr[0].length)
            return Long.MAX_VALUE;
        if(row==arr.length-1&&col==arr[0].length-1)
            return arr[arr.length-1][arr[0].length-1];
        long left=Solve(arr,row,col+1);
        long right=Solve(arr,row+1,col);
        long dig=Solve(arr,row+1,col+1);
        long val=Math.min(left, Math.min(right, dig));
        return val==Long.MAX_VALUE?Long.MAX_VALUE:arr[row][col]+val;
        //return arr[row][col]+Math.min(left,Math.min(right, dig));
    }
    
    
    
    static final Random random=new Random();    
    static void ruffleSort(int[] a) {
        int n=a.length;//shuffle, then sort 
        for (int i=0; i<n; i++) {
            int oi=random.nextInt(n), temp=a[oi];
            a[oi]=a[i]; a[i]=temp;
        }
        Arrays.sort(a);
    }
    
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        String next() {
            while (!st.hasMoreTokens())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        
        int nextInt() {
            return Integer.parseInt(next());
        }
        int[] readArray(int n) {
            int[] a=new int[n];
            for (int i=0; i<n; i++) a[i]=nextInt();
            return a;
        }
        long nextLong() {
            return Long.parseLong(next());
        }
    }
}
